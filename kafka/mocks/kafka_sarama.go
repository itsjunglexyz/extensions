// Automatically generated by MockGen. DO NOT EDIT!
// Source: ../vendor/github.com/Shopify/sarama/sync_producer.go

package mocks

import (
	"github.com/Shopify/sarama"
	gomock "github.com/golang/mock/gomock"
)

// Mock of SyncProducer interface
type MockSyncProducer struct {
	ctrl     *gomock.Controller
	recorder *_MockSyncProducerRecorder
}

func (_m *MockSyncProducer) TxnStatus() sarama.ProducerTxnStatusFlag {
	//TODO implement me
	panic("implement me")
}

func (_m *MockSyncProducer) IsTransactional() bool {
	//TODO implement me
	panic("implement me")
}

func (_m *MockSyncProducer) BeginTxn() error {
	//TODO implement me
	panic("implement me")
}

func (_m *MockSyncProducer) CommitTxn() error {
	//TODO implement me
	panic("implement me")
}

func (_m *MockSyncProducer) AbortTxn() error {
	//TODO implement me
	panic("implement me")
}

func (_m *MockSyncProducer) AddOffsetsToTxn(offsets map[string][]*sarama.PartitionOffsetMetadata, groupId string) error {
	//TODO implement me
	panic("implement me")
}

func (_m *MockSyncProducer) AddMessageToTxn(msg *sarama.ConsumerMessage, groupId string, metadata *string) error {
	//TODO implement me
	panic("implement me")
}

// Recorder for MockSyncProducer (not exported)
type _MockSyncProducerRecorder struct {
	mock *MockSyncProducer
}

func NewMockSyncProducer(ctrl *gomock.Controller) *MockSyncProducer {
	mock := &MockSyncProducer{ctrl: ctrl}
	mock.recorder = &_MockSyncProducerRecorder{mock}
	return mock
}

func (_m *MockSyncProducer) EXPECT() *_MockSyncProducerRecorder {
	return _m.recorder
}

func (_m *MockSyncProducer) SendMessage(msg *sarama.ProducerMessage) (int32, int64, error) {
	ret := _m.ctrl.Call(_m, "SendMessage", msg)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSyncProducerRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendMessage", arg0)
}

func (_m *MockSyncProducer) SendMessages(msgs []*sarama.ProducerMessage) error {
	ret := _m.ctrl.Call(_m, "SendMessages", msgs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSyncProducerRecorder) SendMessages(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendMessages", arg0)
}

func (_m *MockSyncProducer) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSyncProducerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
